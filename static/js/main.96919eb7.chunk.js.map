{"version":3,"sources":["api/users.ts","api/todos.ts","components/NewTodo/NewTodo.tsx","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["id","name","username","email","title","completed","userId","NewTodo","users","onAdd","useState","setTitle","titleHasError","setTitleHasError","userSelect","setUserSelect","userSelectHasError","setUserSelectHasError","handlerOnSubmit","onSubmit","e","preventDefault","className","htmlFor","type","placeholder","value","onChange","event","currentTitle","input","target","match","handlerTitleInput","handlerUserSelect","disabled","map","user","UserInfo","href","TodoInfo","todo","findedUser","find","findUser","usersFromServer","cn","TodoList","todos","App","todosFromServer","listTodo","setListTodo","lastTodoIndex","reduce","maxI","curI","currrentList","addTodo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.96919eb7.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { useState } from 'react';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  users: User[];\n  onAdd: (todo: Omit<Todo, 'id'>) => void;\n};\n\nexport const NewTodo: React.FC<Props> = ({ users, onAdd }) => {\n  const [title, setTitle] = useState('');\n  const [titleHasError, setTitleHasError] = useState(false);\n\n  const [userSelect, setUserSelect] = useState(0);\n  const [userSelectHasError, setUserSelectHasError] = useState(false);\n\n  const isAllowedSymbols = (input: string): boolean => {\n    const pattern = /^[a-zA-Z А-ЩЬЮЯҐЄІЇа-щьюяґєії0-9]+$/;\n\n    if (!input) {\n      return true;\n    }\n\n    return !!input.match(pattern);\n  };\n\n  const clearTodoFields = () => {\n    setTitle('');\n    setUserSelect(0);\n  };\n\n  const handlerTitleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    // setTitle(event.target.value);\n    setTitle(currentTitle => {\n      return isAllowedSymbols(event.target.value)\n        ? event.target.value\n        : currentTitle;\n    });\n    setTitleHasError(false);\n  };\n\n  const handlerUserSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserSelect(+event.target.value);\n    setUserSelectHasError(false);\n  };\n\n  const handlerOnSubmit = () => {\n    setTitleHasError(!title);\n    setUserSelectHasError(!userSelect);\n\n    if (!title || !userSelect) {\n      return;\n    }\n\n    onAdd({ title, completed: false, userId: userSelect });\n    clearTodoFields();\n  };\n\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        handlerOnSubmit();\n      }}\n    >\n      <div className=\"field\">\n        <label htmlFor=\"titleInput\">Title: </label>\n        <input\n          type=\"text\"\n          data-cy=\"titleInput\"\n          id=\"titleInput\"\n          placeholder=\"Enter a title\"\n          value={title}\n          onChange={(event) => handlerTitleInput(event)}\n        />\n        {titleHasError\n          && <span className=\"error\">Please enter a title</span>}\n      </div>\n\n      <div className=\"field\">\n        <label htmlFor=\"userSelect\">User: </label>\n        <select\n          data-cy=\"userSelect\"\n          id=\"userSelect\"\n          value={userSelect}\n          onChange={(event) => handlerUserSelect(event)}\n        >\n          <option\n            value=\"0\"\n            disabled\n          >\n            Choose a user\n          </option>\n          {users.map(user => (\n            <option\n              key={user.id}\n              value={user.id}\n            >\n              {user.name}\n            </option>\n          ))}\n        </select>\n        {userSelectHasError\n          && <span className=\"error\">Please choose a user</span>}\n      </div>\n\n      <button\n        type=\"submit\"\n        data-cy=\"submitButton\"\n      >\n        Add\n      </button>\n    </form>\n  );\n};\n","import { User } from '../../types/User';\n\ntype Props = {\n  user: User\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => (\n  <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n    {user.name}\n  </a>\n);\n","import cn from 'classnames';\nimport usersFromServer from '../../api/users';\n\nimport { UserInfo } from '../UserInfo';\n\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\nfunction findUser(userId: number, users: User[]): User {\n  const findedUser = users.find(user => user.id === userId);\n\n  return !findedUser\n    ? {\n      id: 0,\n      name: 'Anonymous',\n      username: 'Anonymous',\n      email: '',\n    }\n    : findedUser;\n}\n\ntype Props = {\n  todo: Todo\n};\n\nexport const TodoInfo: React.FC<Props> = ({\n  todo: {\n    id,\n    completed,\n    title,\n    userId,\n  },\n}) => {\n  // const user = usersFromServer.find(usr => usr.id === userId);\n  const user = findUser(userId, usersFromServer);\n\n  return (\n    <article\n      data-id={id}\n      className={cn('TodoInfo', { 'TodoInfo--completed': completed })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n      <UserInfo user={user} />\n    </article>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => {\n        return (\n          <TodoInfo\n            key={todo.id}\n            todo={todo}\n          />\n        );\n      })}\n    </section>\n  );\n};\n","import { useState } from 'react';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nimport { NewTodo } from './components/NewTodo';\nimport { TodoList } from './components/TodoList';\n\nimport './App.scss';\n\nimport { Todo } from './types/Todo';\n\nexport const App = () => {\n  const [listTodo, setListTodo] = useState([...todosFromServer]);\n\n  const addTodo = (todo: Omit<Todo, 'id'>) => {\n    const lastTodoIndex = listTodo.reduce((maxI, curI) => {\n      return curI.id > maxI ? curI.id : maxI;\n    }, 0);\n\n    setListTodo(currrentList => [...currrentList, {\n      ...todo,\n      id: lastTodoIndex + 1,\n    }]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <NewTodo\n        users={usersFromServer}\n        onAdd={(todo) => {\n          addTodo((todo));\n        }}\n      />\n\n      <TodoList\n        todos={listTodo}\n      />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}